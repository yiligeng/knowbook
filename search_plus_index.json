{"./":{"url":"./","title":"1. Introduction","keywords":"","body":"如何使用GitBook的教程 Example GitBook website using GitLab Pages. Learn more about GitLab Pages at https://pages.gitlab.io and the official documentation https://docs.gitlab.com/ce/user/project/pages/. Table of Contents generated with DocToc GitLab CI Building locally GitLab User or Group Pages Did you fork this project? Troubleshooting GitLab CI This project's static Pages are built by GitLab CI, following the steps defined in .gitlab-ci.yml: # requiring the environment of NodeJS 10 image: node:10 # add 'node_modules' to cache for speeding up builds cache: paths: - node_modules/ # Node modules and dependencies before_script: - npm install gitbook-cli -g # install gitbook - gitbook fetch 3.2.3 # fetch final stable version - gitbook install # add any requested plugins in book.json test: stage: test script: - gitbook build . public # build to public path only: - branches # this job will affect every branch except 'master' except: - master # the 'pages' job will deploy and build your site to the 'public' path pages: stage: deploy script: - gitbook build . public # build to public path artifacts: paths: - public expire_in: 1 week only: - master # this job will affect only the 'master' branch Building locally To work locally with this project, you'll have to follow the steps below: Fork, clone or download this project Install GitBook npm install gitbook-cli -g Fetch GitBook's latest stable version gitbook fetch latest Preview your project: gitbook serve Add content Generate the website: gitbook build (optional) Push your changes to the master branch: git push Read more at GitBook's documentation. GitLab User or Group Pages To use this project as your user/group website, you will need one additional step: just rename your project to namespace.gitlab.io, where namespace is your username or groupname. This can be done by navigating to your project's Settings. Read more about user/group Pages and project Pages. Did you fork this project? If you forked this project for your own use, please go to your project's Settings and remove the forking relationship, which won't be necessary unless you want to contribute back to the upstream project. Troubleshooting CSS is missing! That means two things: Either that you have wrongly set up the CSS URL in your templates, or your static generator has a configuration option that needs to be explicitly set in order to serve static assets under a relative URL. "},"Template/template.html":{"url":"Template/template.html","title":"2. Template","keywords":"","body":"这是个知识库的模板文件 如何成为合格DJ猫的知识 介绍 知识领域: 音乐DJ领域~~~ 特点: 老少咸宜 前提硬件: 打碟机 前提软件: 打碟机对应的软件, 基础的节奏和乐理知识 知识体 如何成为DJ, 五个最好的方式 (插图示例) (链接示例) 图片原链接 重要理解知识 2.1 手脚并用 2.2 摇头晃脑 2.3 不能喝酒 附加内容 困惑点: 如何成为Avicii那样的BIG GOD 注意事项 参考资料 世界百大DJ电音作品鉴赏 如果您遵循本指南的制作流程而发现有问题或可以改进的流程，请提出 Issue 或 Pull request 。 "},"docs/book/vpn/vpn.html":{"url":"docs/book/vpn/vpn.html","title":"3. VPN","keywords":"","body":"3.1. 内网互通示意图 3.2. 办公内网与阿里云VPC互通最佳实践 "},"docs/book/vpn/01_内网互通示意图.html":{"url":"docs/book/vpn/01_内网互通示意图.html","title":"3.1. 内网互通示意图","keywords":"","body":"1. 原理理解与示意图 "},"docs/book/vpn/02_内网vpn最佳实践.html":{"url":"docs/book/vpn/02_内网vpn最佳实践.html","title":"3.2. 办公内网与阿里云VPC互通最佳实践","keywords":"","body":"搭建vpn, 连接客户端与阿里云vpc教程 一. 搭建vpn与客户端 参考图片如下: 图片原链接 二. 设置网络参数 参考图片如下: 图片原链接 三. 注意事项 (1) 图片1 vpn教程比较详细 (2) 图片2 参数设置重要 (3) 两个步骤或有重复 一定注意路由表和安全组的设置 如果您遵循本指南的制作流程而发现有问题或可以改进的流程，请提出 Issue 或 Pull request 。 "},"docs/book/microservice/microservice.html":{"url":"docs/book/microservice/microservice.html","title":"4. Microservice","keywords":"","body":"4.1. 微服务的概念 "},"docs/book/microservice/01_微服务的概念.html":{"url":"docs/book/microservice/01_微服务的概念.html","title":"4.1. 微服务的概念","keywords":"","body":"1. 基本概念与起源 基本概念 微服务体系结构: 是一种SOA(面向服务的体系结构)结构风格的变体, 将应用程序安排为松散耦合服务的集合。 在微服务体系结构中，服务是细粒度的，协议是轻量级的。目标是团队可以独立于他人将他们的服务带入生活。 松散耦合减少了所有类型的依赖关系及其周围的复杂性，因为服务开发人员不需要关心服务的用户， 他们不会强制服务的用户做出更改 起源 2005, Peter Rodgers introduced the term \"Micro-Web-Services\" during a presentation at the Web Services Edge conference 2014, Martin Fowler, James Lewis describes a microservices-based architecture as having the following properties 微服务的先决条件 1. Rapid provisioning 快速的配置能力 2. Basic Monitoring 基本的监控和回滚的能力 3. Rapid application deployment 快速的应用部署能力 微服务的特点 1. Componentization via Services 组件化的服务(把服务当成组件): 组件的概念: 可独立替换和升级的软件单元 原因一: 服务可以独立的部署 原因二: 更好的组件接口, 组件发布接口 2. Organized around Business Capabilities 围绕着业务功能的组织来分割服务: 现状: Any organization that designs a system (defined broadly) will produce a design whose structure is a copy of the organization's communication structure. -- Melvin Conway, 1968 3. Products not Projects 产品而不是项目: 团队应当对整个产品的生命周期负责 产品的概念: 一个产品是一个能够被用户使用的软件系统, 一个产品可能包含多个服务 项目的概念: 一个项目是一个团队为了完成一个特定的功能而开发的一系列任务的集合 项目的特点: 项目的生命周期是短暂的, 项目的目标是为了完成一次性的任务 产品的特点: 产品的生命周期是长期的, 产品的目标是为了满足客户的需求 原因: 项目的特点会导致项目的功能会被限制在一次性的任务上, 项目的功能很难被复用 4. Smart endpoints and dumb pipes 智能端点和愚蠢的管道: 微服务的应用致力松耦合和高内聚 智能端点: 业务的逻辑发生于端点之后, 对于消费者不可见, 像一个魔术 愚蠢的管道: 不做复杂的业务逻辑, 只做简单的数据转换, 甚至可以被替换 5. Decentralized Governance 去中心化治理: 服务的所有权: 服务的生命周期由服务的开发者来决定 服务的生命周期: 服务的创建, 服务的发布, 服务的删除 原因: 服务的所有权可以让服务的开发者更好的管理服务 6. Decentralized Data Management 去中心化的数据管理: Bounded Context(限界上下文):对待这个问题非常有用的方式为Bounded Context的领域驱动设计。DDD把复杂的领域拆分成不同上下文边界以及它们之间的关系 Polyglot Persistence(多語言持久性): 微服务让每个服务管理自己的数据库: 7. Infrastructure Automation 基础设施自动化: 原因: 服务的快速部署需要基础设施的自动化 8. Design for failure 容错性设计: 服务作为组件的一个结果在于应用需要有能容忍服务的故障的设计 9. Evolutionary Design 迭代式设计: 服务的设计应当是迭代式的, 报废, 不是长期发展 微服务的优点 2. 其他优秀补充 微服务的先决条件 "}}